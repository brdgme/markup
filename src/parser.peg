use super::ast::{Node, Row, Cell, Align};
use brdgme_color::Color;
use std::str::FromStr;

tag_word -> String
  = [^ }]+ { match_str.to_string() }

not_quote -> String
  = [^"]+ { match_str.to_string() }

tag_arg -> String
  = " "+ "\"" a:not_quote "\"" { a }
  / " "+ a:tag_word { a }

tag_arg_usize -> usize
  = " "+ [0-9]+ {?
    match usize::from_str(match_str) {
      Ok(n) => Ok(n),
      Err(_) => Err("expected positive integer"),
    }
  }

tag_arg_align -> Align
  = a:tag_arg {?
    match Align::from_str(&a) {
      Ok(a) => Ok(a),
      Err(_) => Err("invalid align, must be one of left, center, right"),
    }
  }

fg -> Node
  = "{{#fg" a:tag_arg "}}" children:node* "{{/fg}}" {?
    match Color::from_str(&a) {
      Ok(c) => Ok(Node::Fg(c, children)),
      Err(e) => Err("invalid color"),
    }
  }

bg -> Node
  = "{{#bg" a:tag_arg "}}" children:node* "{{/bg}}" {?
    match Color::from_str(&a) {
      Ok(c) => Ok(Node::Bg(c, children)),
      Err(e) => Err("invalid color"),
    }
  }

bold -> Node
  = "{{#b}}" children:node* "{{/b}}" { Node::Bold(children) }

action -> Node
  = "{{#action" a:tag_arg "}}" children:node* "{{/action}}" { Node::Action(a, children) }

table -> Node
  = "{{#table}}" [ \n]* rows:row* "{{/table}}" { Node::Table(rows) }

row -> Row
  = "{{#row}}" cells:cell* "{{/row}}" [ \n]* { cells }

cell -> Cell
  = "{{#cell" align:tag_arg_align? "}}" children:node* "{{/cell}}" [ \n]* {
    (align.unwrap_or(Align::Left), children)
  }

align -> Node
  = "{{#align" a:tag_arg_align w:tag_arg_usize "}}" children:node* "{{/align}}" {
    Node::Align(a, w, children)
  }

player -> Node
  = "{{player" p:tag_arg_usize "}}" { Node::Player(p) }

#[pub]
node -> Node
  = fg
  / bg
  / bold
  / player
  / table
  / align
  / text

#[pub]
text -> Node
  = t:text_chunk+ { Node::Text(t.join("")) }

text_chunk -> String
  = !tag_open .[^{]* { match_str.to_string() }

tag_open -> ()
  = "{{"

#[pub]
markup -> Vec<Node>
  = node*